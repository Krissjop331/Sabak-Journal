from django.db.models.signals import post_migrate, m2m_changed, post_save
from django.dispatch import receiver
from django.contrib.auth import get_user_model
from .models import Role, Group, Subject, Teacher, Student, Parent, Lesson, Attendance
from django.utils import timezone
from django.db import IntegrityError
import random
import datetime

User = get_user_model()

@receiver(m2m_changed, sender=User.role.through)
def create_role_based_records(sender, instance, action, pk_set, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ Student/Teacher/Parent –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π
    """
    if action == 'post_add':  # –ö–æ–≥–¥–∞ —Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for role_id in pk_set:
            try:
                role = Role.objects.get(id=role_id)
                print(f"üîÑ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å '{role.name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {instance.username}")

                if role.name.lower() in ['—Å—Ç—É–¥–µ–Ω—Ç', '—Å—Ç—É–¥–µ–Ω—Ç—ã']:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å Student, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    if not hasattr(instance, 'student'):
                        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                        default_group = Group.objects.first()
                        if default_group:
                            student = Student.objects.create(
                                user=instance,
                                group=default_group
                            )
                            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç –¥–ª—è {instance.username} –≤ –≥—Ä—É–ø–ø–µ {default_group.name}")
                        else:
                            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {instance.username}")

                elif role.name.lower() in ['—É—á–∏—Ç–µ–ª—å', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'teacher']:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å Teacher, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    if not hasattr(instance, 'teacher'):
                        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
                        default_group = Group.objects.first()
                        if default_group:
                            teacher = Teacher.objects.create(
                                user=instance,
                                main_group=default_group
                            )
                            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—á–∏—Ç–µ–ª—å –¥–ª—è {instance.username} —Å –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–æ–π {default_group.name}")
                        else:
                            print(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∏—Ç–µ–ª—è {instance.username}")

                elif role.name.lower() in ['—Ä–æ–¥–∏—Ç–µ–ª—å', '—Ä–æ–¥–∏—Ç–µ–ª–∏', 'parent']:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å Parent, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    if not hasattr(instance, 'parent'):
                        parent = Parent.objects.create(
                            user=instance,
                            parent_type='other'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–¥—Ä—É–≥–æ–π"
                        )
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å –¥–ª—è {instance.username}")

            except Role.DoesNotExist:
                print(f"‚ùå –†–æ–ª—å —Å ID {role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except IntegrityError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è {instance.username}: {e}")
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {instance.username}: {e}")

@receiver(m2m_changed, sender=User.role.through)
def remove_role_based_records(sender, instance, action, pk_set, **kwargs):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ Student/Teacher/Parent –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π
    """
    if action == 'post_remove':  # –ö–æ–≥–¥–∞ —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for role_id in pk_set:
            try:
                role = Role.objects.get(id=role_id)
                print(f"üîÑ –£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å '{role.name}' —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {instance.username}")

                if role.name.lower() in ['—Å—Ç—É–¥–µ–Ω—Ç', '—Å—Ç—É–¥–µ–Ω—Ç—ã']:
                    if hasattr(instance, 'student'):
                        instance.student.delete()
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è {instance.username}")

                elif role.name.lower() in ['—É—á–∏—Ç–µ–ª—å', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'teacher']:
                    if hasattr(instance, 'teacher'):
                        instance.teacher.delete()
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —É—á–∏—Ç–µ–ª—è –¥–ª—è {instance.username}")

                elif role.name.lower() in ['—Ä–æ–¥–∏—Ç–µ–ª—å', '—Ä–æ–¥–∏—Ç–µ–ª–∏', 'parent']:
                    if hasattr(instance, 'parent'):
                        instance.parent.delete()
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è {instance.username}")

            except Role.DoesNotExist:
                print(f"‚ùå –†–æ–ª—å —Å ID {role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è {instance.username}: {e}")

@receiver(post_migrate)
def create_initial_data(sender, **kwargs):
    if sender.name == 'school_app':
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π
        roles = ['—Å—Ç—É–¥–µ–Ω—Ç—ã', '—É—á–∏—Ç–µ–ª—å', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']
        for role_name in roles:
            role, created = Role.objects.get_or_create(name=role_name)
            if created:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {role_name}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        group_names = [f'–ì—Ä—É–ø–ø–∞ {chr(65 + i)}' for i in range(12)]  # –ì—Ä—É–ø–ø—ã –æ—Ç A –¥–æ L
        for group_name in group_names:
            group, created = Group.objects.get_or_create(
                name=group_name,
                defaults={'course': random.randint(1, 3)}
            )
            if created:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subject_names = [
            '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è',
            '–ò—Å—Ç–æ—Ä–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫',
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ú—É–∑—ã–∫–∞', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞'
        ]
        for subject_name in subject_names:
            subject, created = Subject.objects.get_or_create(name=subject_name)
            if created:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject_name}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_username = 'admin'
        if not User.objects.filter(username=admin_username).exists():
            try:
                admin_user = User.objects.create_superuser(
                    username=admin_username,
                    password='admin',
                    email='admin@gmail.com',
                    first_name='Admin',
                    last_name='Administrator'
                )
                admin_role = Role.objects.get(name='–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                admin_user.role.add(admin_role)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_username}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if User.objects.filter(username__startswith='student').count() < 5:
            create_sample_users()

        # –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
        if Lesson.objects.count() < 10:
            create_sample_lessons()

        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def create_sample_users():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    for i in range(1, 11):
        student_username = f'student{i}'
        if not User.objects.filter(username=student_username).exists():
            try:
                student_user = User.objects.create_user(
                    username=student_username,
                    password='password',
                    email=f'student{i}@example.com',
                    first_name=f'–°—Ç—É–¥–µ–Ω—Ç{i}',
                    last_name=f'–§–∞–º–∏–ª–∏—è{i}'
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∑–∞–ø–∏—Å—å Student)
                student_role = Role.objects.get(name='—Å—Ç—É–¥–µ–Ω—Ç—ã')
                student_user.role.add(student_role)

                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å—Ç—É–¥–µ–Ω—Ç: {student_username}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_username}: {e}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π
    for i in range(1, 6):
        teacher_username = f'teacher{i}'
        if not User.objects.filter(username=teacher_username).exists():
            try:
                teacher_user = User.objects.create_user(
                    username=teacher_username,
                    password='password',
                    email=f'teacher{i}@example.com',
                    first_name=f'–£—á–∏—Ç–µ–ª—å{i}',
                    last_name=f'–§–∞–º–∏–ª–∏—è{i}'
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —É—á–∏—Ç–µ–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∑–∞–ø–∏—Å—å Teacher)
                teacher_role = Role.objects.get(name='—É—á–∏—Ç–µ–ª—å')
                teacher_user.role.add(teacher_role)

                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—É—á–∏—Ç–µ–ª—å: {teacher_username}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–∏—Ç–µ–ª—è {teacher_username}: {e}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    for i in range(1, 6):
        parent_username = f'parent{i}'
        if not User.objects.filter(username=parent_username).exists():
            try:
                parent_user = User.objects.create_user(
                    username=parent_username,
                    password='password',
                    email=f'parent{i}@example.com',
                    first_name=f'–†–æ–¥–∏—Ç–µ–ª—å{i}',
                    last_name=f'–§–∞–º–∏–ª–∏—è{i}'
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∑–∞–ø–∏—Å—å Parent)
                parent_role = Role.objects.get(name='—Ä–æ–¥–∏—Ç–µ–ª–∏')
                parent_user.role.add(parent_role)

                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–æ–¥–∏—Ç–µ–ª—å: {parent_username}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è {parent_username}: {e}")

def create_sample_lessons():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —É—Ä–æ–∫–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìö –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —É—Ä–æ–∫–æ–≤...")

    groups = Group.objects.all()
    subjects = Subject.objects.all()

    if not groups.exists() or not subjects.exists():
        print("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤")
        return

    # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 14 –¥–Ω–µ–π
    base_date = timezone.now().date()

    lessons_created = 0
    max_lessons = 50  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    for group in groups:
        students = Student.objects.filter(group=group)
        if not students.exists():
            continue

        for subject in subjects[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            if lessons_created >= max_lessons:
                break

            # –°–æ–∑–¥–∞–µ–º 2-3 —É—Ä–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≥—Ä—É–ø–ø–∞-–ø—Ä–µ–¥–º–µ—Ç
            lessons_count = random.randint(2, 3)

            for lesson_num in range(lessons_count):
                if lessons_created >= max_lessons:
                    break

                # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 14 –¥–Ω–µ–π
                days_offset = random.randint(1, 14)
                lesson_date = base_date + datetime.timedelta(days=days_offset)

                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_or_create –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    lesson, created = Lesson.objects.get_or_create(
                        subject=subject,
                        date=lesson_date,
                        group=group
                    )

                    if created:
                        lessons_created += 1
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                        for student in students:
                            attended = random.choice([True, False, True])  # 66% —à–∞–Ω—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
                            grade = None

                            if attended and random.choice([True, False]):  # 50% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É
                                grade = random.randint(2, 5)

                            Attendance.objects.get_or_create(
                                lesson=lesson,
                                student=student,
                                defaults={
                                    'attended': attended,
                                    'grade': grade
                                }
                            )

                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫: {subject.name} - {lesson_date} - {group.name}")

                except IntegrityError:
                    # –£—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    pass
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")

        if lessons_created >= max_lessons:
            break

    print(f"üìö –°–æ–∑–¥–∞–Ω–æ {lessons_created} —É—Ä–æ–∫–æ–≤")
